#!/bin/bash

# --- default folder and file ( you can change this ) --- 

echo "$1"
# Files and Folders
CONFIG_DIR="$HOME/.config/"
FOLDER_NAME="ghb/"
FILE_NAME="private"

# Style ( reff :- https://ansi.gabebanks.net/?ref=linuxhandbook.com )
NONE="\033[0m"
PROMPT="\033[30;46m"
LOGS="\033[1;32;3m ✔ "
ERROR="\033[1;31;3m ✘ "

# -----------------------------------------------------




# ------------ SAVING CREDENTIALS LOGIC ------------

# File path
GHB_PRIVATE_FILE+="$CONFIG_DIR$FOLDER_NAME$FILE_NAME"

# Check if file exists
if [ ! -f "$GHB_PRIVATE_FILE" ]; then

    # get username and passowrd
    echo -e "$PROMPT"   # for styleing prompts
    read -p "Enter your Github Username: " USERNAME
    read -p "Enter your Personal access token: " TOKEN
    echo -e "$NONE"     # remove styling 

    # check if CONFIG_DIR exists
    if [ ! -d "$CONFIG_DIR" ]; then
        mkdir "$CONFIG_DIR"
    fi

    # check if FOLDER_NAME exists
    if [ ! -d "$CONFIG_DIR$FOLDER_NAME" ]; then
        mkdir "$CONFIG_DIR$FOLDER_NAME"
    fi

    # save username and password to GHB_PRIVATE_FILE
    echo "#!/bin/bash" > "$GHB_PRIVATE_FILE"
    echo "USERNAME=\"$USERNAME\"" >> "$GHB_PRIVATE_FILE"
    echo "TOKEN=\"$TOKEN\"" >> "$GHB_PRIVATE_FILE"
    chmod 700 "$GHB_PRIVATE_FILE"

else
    # Get the USERNAME & TOKEN variables form the GHB_PRIVATE_FILE
    source "$GHB_PRIVATE_FILE"
    fi

# ----------------------------------------------------




# ---------------- CHECK COMMIT LOGIC -----------------

# if not a github repo then initialize
if [[ ! $(git status) ]]; then
    echo -e "\n  $LOGS Creating a Git Repo \n"
    git init
    echo -e "$NONE"     # remove styling 
fi

# Check if there aren't any previous commit then `add` and `commit`
# [[ $(git status --porcelain) ]] retruns true if there are uncommited changes
if [[ $(git status --porcelain) ]]; then
    echo -e "\n  $LOGS Adding all changes to Staging area \n"
    git add .
    echo -e "$NONE$PROMPT"   # for styleing prompts
    read -p "Enter a Commit Message: " COMMIT_MESSAGE
    echo -e "$NONE"     # remove styling 
    git commit -m "$COMMIT_MESSAGE"
fi

# -------------------------------------------------------




# ---------------- PUSH TO GITHUB LOGIC ------------------

# if remote origin doesn't exists ask for it
if [[ ! $(git config --get remote.origin.url) ]]; then
    echo -e "$PROMPT"   # for styleing prompts
    read -p "Enter Your Github Repo URL: " REMOTE_ORIGIN
    echo -e "$NONE"     # remove styling 
    git remote add origin $REMOTE_ORIGIN
fi

# Get the name of the remote repository
REPO_URL=$(git config --get remote.origin.url)
REPO_NAME=${REPO_URL##*/}   # Extract the repository name from the URL
REPO_NAME=${REPO_NAME%.git} # Remove the .git extension from the name

# Check if user has provided a branch as an argument
if [[ $1 ]]; then
    # Push to the provided branch
    git push -u "https://$USERNAME:$TOKEN@github.com/$USERNAME/$REPO_NAME.git" $1
else
    # Push to curremt branch
    current_branch=`git rev-parse --abbrev-ref HEAD`
    echo -e "\n $LOGS Pushing to GitHub... Please Wait... 𐅡 $NONE \n "
    if git push -u "https://$USERNAME:$TOKEN@github.com/$USERNAME/$REPO_NAME.git" $curremt_branch &> .ghb_err.log; then
        #Push sucessful
        echo -e "\n $LOGS Pushed to GitHub $NONE \n "
        rm .ghb_err.log
    else
        #Push Faliled
        echo -e "\n $ERROR Push Failed !! $NONE \n "
        cat .ghb_err.log
        echo -e "\n  created file .ghb_err.log \n"
    fi
fi
# -----------------------------------------------------------
